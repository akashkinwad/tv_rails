!!!
%html{lang: "en"}
  %head
    %meta{content: "text/html; charset=UTF-8", "http-equiv" => "Content-Type"}/
    %meta{charset: "UTF-8"}/
    %meta{content: "IE=edge", "http-equiv" => "X-UA-Compatible"}/
    %meta{content: "width=device-width, initial-scale=1.0", name: "viewport"}/
    %link{href: "/user/css/bootstrap.min.css", rel: "stylesheet"}/
    %link{href: "/user/css/main.css", rel: "stylesheet"}/
    %link{href: "/user/css/common.css", rel: "stylesheet"}/
    %link{href: "/user/fonts/fonts.css", rel: "stylesheet"}/
    %link{href: "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css", rel: "stylesheet"}/
    %link{href: "/user/slider/slick.css", rel: "stylesheet"}/
    %link{href: "/user/slider/slick-theme.css", rel: "stylesheet"}/
    %title TalentsVerse
    %script{src: "/user/js/jquery.js"}
    %script{src: "https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js"}
    = csrf_meta_tags
    = csp_meta_tag
    = stylesheet_link_tag "application", "data-turbo-track": "reload"
  %body
    .overlay
    = render partial: 'user/shared/header'
    = yield
    = render partial: 'user/shared/footer'
    / Main Script Files START
    %script{src: "/user/js/bootstrap.min.js"}
    %script{src: "/user/js/bootstrap.bundle.min.js"}
    %script{src: "/user/slider/slick.js"}
    %script{src: "/user/slider/slider-setting.js"}
    %script{src: "/user/js/main.js"}
    / Main Script Files END
:javascript
  var token = $('meta[name=csrf-token]').attr('content');
  var user_id = "#{current_user.id}";

  const marketPlaceAddress = "0x7aE5B2215Cb8330753Ec60a126778643A6499Bc0";
  const nftAddress = "0xa5399a1EE519F12A95E86766168308bda2aF82F1";
  const paymentTokenAddress = "0x39E77C8Bc081F20a7AA3a6027Db438FB5DAA1Aa0";

  const nftContract = '0xa5399a1EE519F12A95E86766168308bda2aF82F1';
  const walletId = "#{current_user.wallet_address}";

  let provider = (new Web3(Web3.givenProvider)).eth;
  var currentAccount = undefined;

  async function toWei(number) {
    return Web3.utils.toWei(number.toString());
  }

  async function getAccount() {
    if (provider) {
      let accounts = await provider.getAccounts();
      currentAccount = accounts[0];
      console.log('currentAccount =>', currentAccount);
      updateNftAccountId(currentAccount)
      return currentAccount;
    }
  };

  async function requestAccount() {
    if (provider) {
      let accounts = await provider.requestAccounts();
      currentAccount = accounts[0];
      return currentAccount;
    }
  };

  function updateNftAccountId(wallet_address) {
    var data = { wallet_address: wallet_address };

    $.ajax({
      url: `/users/${user_id}`,
      type: 'PUT',
      data: JSON.stringify(data),
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': token
      },
      dataType: 'json',
      success: function (user, status) {
        alert('Successfully Synced to NFT');
      }
    });
  }

  $('#wallet-icon').click(function(){
    if(typeof currentAccount === 'undefined'){
      requestAccount();
    } else {
      getAccount();
    }
  });
