!!!
%html{lang: "en"}
  %head
    %meta{content: "text/html; charset=UTF-8", "http-equiv" => "Content-Type"}/
    %meta{charset: "UTF-8"}/
    %meta{content: "IE=edge", "http-equiv" => "X-UA-Compatible"}/
    %meta{content: "width=device-width, initial-scale=1.0", name: "viewport"}/
    %link{href: "/user/css/bootstrap.min.css", rel: "stylesheet"}/
    %link{href: "/user/css/main.css", rel: "stylesheet"}/
    %link{href: "/user/css/common.css", rel: "stylesheet"}/
    %link{href: "/user/fonts/fonts.css", rel: "stylesheet"}/
    %link{href: "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css", rel: "stylesheet"}/
    %link{href: "/user/slider/slick.css", rel: "stylesheet"}/
    %link{href: "/user/slider/slick-theme.css", rel: "stylesheet"}/
    %title TalentsVerse
    %script{src: "/user/js/jquery.js"}
    %script{src: "https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js"}
    = csrf_meta_tags
    = csp_meta_tag
    = stylesheet_link_tag "application", "data-turbo-track": "reload"
    = javascript_importmap_tags
  %body
    .overlay
    = render partial: 'user/shared/header'
    = yield
    = render partial: 'user/shared/footer'
    / Main Script Files START
    %script{src: "/user/js/bootstrap.min.js"}
    %script{src: "/user/js/bootstrap.bundle.min.js"}
    %script{src: "/user/slider/slick.js"}
    %script{src: "/user/slider/slider-setting.js"}
    %script{src: "/user/js/main.js"}
    / Main Script Files END
:javascript
  var nftServerUrl = "http://104.248.251.208";
  var token = $('meta[name=csrf-token]').attr('content');
  var user_id = "#{current_user.id}";

  var marketPlaceAddress = "0xC81c31fadbe8B99b20B8B1a149Ee167334242F69";
  var nftAddress = "0x726f3491BE79d47669A327DD93d3cC1850F4cE60";
  var paymentTokenAddress = "0x39E77C8Bc081F20a7AA3a6027Db438FB5DAA1Aa0";
  var royaltyReceiverAddress = "0xc014f2a0169a6b3426B78f03CCB8e9c75778d111";

  var nftContract = '0x726f3491BE79d47669A327DD93d3cC1850F4cE60';
  var walletId = "#{current_user.wallet_address}";

  var provider = (new Web3(Web3.givenProvider)).eth;
  var currentAccount = undefined;

  var marketplaceAbi = undefined;
  var paymentTokenAbi = undefined;

  async function toWei(number) {
    return Web3.utils.toWei(number.toString());
  }

  async function getAccount(raiseAlert=true) {
    if (provider) {
      let accounts = await provider.getAccounts();
      currentAccount = accounts[0];
      console.log('currentAccount =>', currentAccount);

      if (currentAccount) {
        updateNftAccountId(currentAccount, raiseAlert)
      } else {
        var r = confirm("Your NFT Wallet is not Synced. Click 'OK' to sync your wallet!");
        if (r == true) {
          requestAccount();
        } else {
          alert('Please Synced your NFT Wallet first!');
        }
      }

      return currentAccount;
    }
  };

  async function requestAccount() {
    if (provider) {
      let accounts = await provider.requestAccounts();
      currentAccount = accounts[0];

      alert('Successfully Synced NFT Wallet!');

      return currentAccount;
    }
  };

  async function setMarketplaceAbi() {
    try {
      var data = await fetch('/user/json/marketplaceVoucher.json');
      marketplaceAbi = await data.json();

      console.log('marketplaceAbi => ', marketplaceAbi);

      return marketplaceAbi
    } catch (error) {
      console.log(error);
    }
  };

  async function setPaymentTokenAbi() {
    try {
      var data = await fetch('/user/json/paymentToken.json');
      paymentTokenAbi = await data.json();

      console.log('paymentTokenAbi => ', paymentTokenAbi);

      return paymentTokenAbi
    } catch (error) {
      console.log(error);
    }
  };

  function updateNftAccountId(wallet_address, raiseAlert) {
    var data = { wallet_address: wallet_address };

    $.ajax({
      url: `/users/${user_id}`,
      type: 'PUT',
      data: JSON.stringify(data),
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': token
      },
      dataType: 'json',
      success: function (user, status) {
        if (raiseAlert) {
          alert('Successfully Synced NFT Wallet!');
        }
      }
    });
  }

  $('#wallet-icon').click(function(){
    if(typeof currentAccount === 'undefined'){
      requestAccount();
    } else {
      getAccount();
    }
  });

  setMarketplaceAbi();
  setPaymentTokenAbi();

  async function mintPaymentToken() {
    const paymentTokenContract = new provider.Contract(paymentTokenAbi, paymentTokenAddress);

    return paymentTokenContract.methods.mint().send({from: currentAccount});
  }

  async function claimOffer(offerId, royaltyNominator, payees, shares) {
    let params = {
      offerId: offerId,
      royaltyNominator: royaltyNominator,
      payees: payees,
      shares: shares
    };

    let response = await fetch('/api/v1/nfts/sign_royalty', {
      method: 'POST',
      mode: 'cors',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(params)
    });

    let json = await response.json();

    console.log("response from royalty API ====>", response);

    const marketPlaceContract = new provider.Contract(marketplaceAbi, marketPlaceAddress);

    return marketPlaceContract.methods.claimOffer(
      offerId,
      royaltyNominator,
      payees,
      shares,
      json.hashMessage,
      json.signature
    ).send({from: currentAccount}).then((result) => {
      console.log('claimOffer result => ', result)
      return {
        txData: result,
        nftId: parseInt(result.events.ClaimedOffer.returnValues.nftId)
      };
    });
  }
