%section.create_view
  .container.my-4.mb-5
    = form_for [:user, @nft_post], remote: true do |f|
      .row.create-sec
        - if @nft_post.errors.any?
          #error_explanation
            %h2= "#{pluralize(@nft_post.errors.count, "error")} prohibited this category from being saved:"
            %ul
              - @nft_post.errors.full_messages.each do |message|
                %li= message

        .col-6.create-left.d-flex.justify-content-center.align-items-start
          .input-grup
            .SL_Box.btn-file.uploadedOuter
              .img-box.d-flex.flex-column.text-center
                .file-upload.d-flex.flex-column.text-center.align-items-center
                  %img{src: "/user/img/default/Vector.png"}/
                  %span.color-2.fw-5.upload-text
                    Upload an
                    %br/
                    image/video(drag and drop)
                .uploadedfile
                  %img#myFile{src: ""}/
                = f.file_field :attachment, onchange: "readURL(this)"
              .text-box.w-100.d-flex.justify-content-between.align-items-start
                .text-box-left.d-flex.flex-column.justify-content-center.align-items-center.align-items-lg-start
                  %span.name-1 Categories
                  %strong.name-2 Title
                .text-box-right.d-flex.flex-column.justify-content-end.align-items-end
                  %span.name-4 Price
        .col-6.create-right
          %section.heading-outer.d-flex.justify-content-center.align-items-center.mt-0.px-lg-5.mb-3
            %span.left-line.flex-1
            %span.heading.px-3
              %span.color-2.create-label Create a NFT
            %span.right-line.flex-1
          %section
            %form{action: ""}
              .input-group.mb-4
                .input-grp.d-flex.justify-content-start.align-items-center
                  = f.text_field :title, placeholder: 'Title...', class: 'input-field w-100'
              .input-group.mb-4
                = f.text_area :description, placeholder: 'Description...', class: 'input-field discription-sec'
              .input-group.mb-4
                .input-grp.d-flex.justify-content-start.align-items-center
                  = f.text_field :hashtags, placeholder: '#Keywords...', class: 'input-field w-100'
              .input-group.mb-5.d-flex.justify-content-between
                .input-grp.d-flex.justify-content-start.align-items-center
                  = f.text_field :category, placeholder: 'Category...', class: 'input-field w-100'
              .mb-3
                .d-flex
                  .input-group
                    .input-grp.d-flex.justify-content-start.align-items-center
                      %div
                        %select.form-select.input-grp.select-filed.tltm-select{"aria-label" => "Default select example"}
                          %option{selected: "selected"} TLTM
                      %div
                        = f.text_field :listing_price, placeholder: 'Price...', class: 'input-field w-100', required: true
                  .flex-1.mx-2.me-0
                    = f.text_field :quantity, placeholder: 'Quantity', class: 'amt-select input-grp select-filed'
                .fee-label.m-2
                  %i Service Fee 1.5%
              .mb-3
                .d-flex
                  .input-group
                    .input-grp.d-flex.justify-content-start.align-items-center
                      = f.text_field :start_price, placeholder: 'Start Price', class: 'input-field w-100', required: true
                  .input-group.mx-2.me-0
                    .input-grp.d-flex.justify-content-start.align-items-center
                      = f.text_field :target_price, placeholder: 'Target Price', class: 'input-field w-100', required: true

              .input-group.mb-4
                .input-grp.d-flex.justify-content-start.align-items-center
                  = f.datetime_local_field :end_date, class: 'input-field w-100', required: true

              .btn-outer-1.d-flex.flex-lg-row.flex-column.justify-content-center.align-items-center
                %a.btn.px-5.btn-primary.bg-color-2.br-style-1.mint-btn.mb-3.mb-lg-0.me-lg-3.fw-6#createOfferWithVoucher Save

:javascript
  var token = $('meta[name=csrf-token]').attr('content');
  var user_id = "#{current_user.id}";

  const marketPlaceAddress = "0x7aE5B2215Cb8330753Ec60a126778643A6499Bc0";
  const nftAddress = "0xa5399a1EE519F12A95E86766168308bda2aF82F1";
  const paymentTokenAddress = "0x39E77C8Bc081F20a7AA3a6027Db438FB5DAA1Aa0";

  const nftContract = '0xa5399a1EE519F12A95E86766168308bda2aF82F1';
  const walletId = "#{current_user.wallet_address}";

  let marketplaceAbi = undefined;

  const setMarketplaceAbi = async () => {
    try {
      var data = await fetch('/user/json/marketPlaceAbi.json');
      marketplaceAbi = await data.json();

      return marketplaceAbi
    } catch (error) {
      console.log(error);
    }
  };

  async function toWei(number) {
    return Web3.utils.toWei(number.toString());
  }

  async function createOfferWithVoucherNew(nftId, offerAmount, startPrice, targetPrice, offerEnd) {
    const marketPlaceContract = new provider.Contract(marketplaceAbi, marketPlaceAddress);

    let weiStartPrice = await toWei(startPrice);
    let weiTargetPrice = await toWei(targetPrice);
    let unixDate = Math.floor(offerEnd / 1000);
    let maxSupply = 10;

    let response = await fetch('/api/v1/nfts/sign_nft', {
      method: 'POST',
      mode: 'cors',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        creator: currentAccount,
        nftContract: nftAddress,
        id: nftId,
        offerAmount: offerAmount,
        startPrice: weiStartPrice,
        endPrice: weiTargetPrice,
        endTime: unixDate,
        maxSupply: maxSupply
      })
    });

    let json = await response.json();

    let offerResponse = await marketPlaceContract.methods.createOfferWithVoucher(
      [currentAccount],
      [nftAddress],
      [json.nftId],
      [offerAmount],
      [weiStartPrice],
      [weiTargetPrice],
      [unixDate],
      [maxSupply],
      [json.hashMessage],
      [json.signature]
    ).send({from: currentAccount});

    return [offerResponse, json.nftId]
  }

  setMarketplaceAbi();

  async function submitForm() {
    var date = Date.parse($('#nft_post_end_date').val());
    var offerAmount = parseFloat($('#nft_post_listing_price').val());
    var startPrice  = parseFloat($('#nft_post_start_price').val());
    var targetPrice = parseFloat($('#nft_post_target_price').val());

    const [response, nftId] = await createOfferWithVoucherNew(158, offerAmount, startPrice, targetPrice, date);

    var formData = new FormData($('#new_nft_post')[0]);

    formData.append('nft_post[details]', JSON.stringify(response));
    formData.append('nft_post[nft_id]', nftId);

    $.ajax({
      url: '/user/nft_posts',
      method: 'POST',
      headers: {
        'X-CSRF-Token': token
      },
      data: formData,
      processData: false,
      contentType: false,
      dataType: 'json',
      success:function(data, textStatus, jqXHR){
        $("#new_nft_post")[0].reset();
        alert('Post was successfully created.')
      },
      error: function(jqXHR, textStatus, errorThrown){
        alert('error');
      }
    });
  }

  $('#createOfferWithVoucher').click(function(){
    submitForm()
  });
