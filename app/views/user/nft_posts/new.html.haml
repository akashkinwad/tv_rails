%section.create_view
  .container.my-4.mb-5
    = form_for ([:user, @nft_post]) do |f|
      .row.create-sec
        - if @nft_post.errors.any?
          #error_explanation
            %h2= "#{pluralize(@nft_post.errors.count, "error")} prohibited this category from being saved:"
            %ul
              - @nft_post.errors.full_messages.each do |message|
                %li= message

        .col-6.create-left.d-flex.justify-content-center.align-items-start
          .input-grup
            / <label for="myFile">Upload an <br> image/video(drag and drop)</label>
            .SL_Box.btn-file.uploadedOuter
              .img-box.d-flex.flex-column.text-center
                .file-upload.d-flex.flex-column.text-center.align-items-center
                  %img{src: "/user/img/default/Vector.png"}/
                  %span.color-2.fw-5.upload-text
                    Upload an
                    %br/
                    image/video(drag and drop)
                .uploadedfile
                  %img#myFile{src: ""}/
                = f.file_field :attachment, onchange: "readURL(this)"
              .text-box.w-100.d-flex.justify-content-between.align-items-start
                .text-box-left.d-flex.flex-column.justify-content-center.align-items-center.align-items-lg-start
                  %span.name-1 Categories
                  %strong.name-2 Title
                .text-box-right.d-flex.flex-column.justify-content-end.align-items-end
                  %span.name-4 Price
        .col-6.create-right
          %section.heading-outer.d-flex.justify-content-center.align-items-center.mt-0.px-lg-5.mb-3
            %span.left-line.flex-1
            %span.heading.px-3
              %span.color-2.create-label Create a NFT
            %span.right-line.flex-1
          %section
            %form{action: ""}
              .input-group.mb-4
                .input-grp.d-flex.justify-content-start.align-items-center
                  = f.text_field :title, placeholder: 'Title...', class: 'input-field w-100'
                  / %input.input-field.w-100{id: "", placeholder: "Title...", type: "text"}/
              .input-group.mb-4
                = f.text_area :description, placeholder: 'Description...', class: 'input-field discription-sec'
              .input-group.mb-4
                .input-grp.d-flex.justify-content-start.align-items-center
                  = f.text_field :hashtags, placeholder: '#Keywords...', class: 'input-field w-100'
              .input-group.mb-5.d-flex.justify-content-between
                .input-grp.d-flex.justify-content-start.align-items-center
                  = f.text_field :category, placeholder: 'Category...', class: 'input-field w-100'
              .mb-3
                .d-flex
                  .input-group
                    .input-grp.d-flex.justify-content-start.align-items-center
                      %div
                        %select.form-select.input-grp.select-filed.tltm-select{"aria-label" => "Default select example"}
                          %option{selected: "selected"} TLTM
                      %div
                        = f.text_field :listing_price, placeholder: 'Price...', class: 'input-field w-100'
                  .flex-1.mx-2.me-0
                    = f.text_field :quantity, placeholder: 'Quantity', class: 'amt-select input-grp select-filed'
                .fee-label.m-2
                  %i Service Fee 1.5%
              .btn-outer-1.d-flex.flex-lg-row.flex-column.justify-content-center.align-items-center
                = f.submit 'Save', class: 'btn px-5 btn-primary bg-color-2 br-style-1 mint-btn mb-3 mb-lg-0 me-lg-3 fw-6'
              .btn-outer-1.d-flex.flex-lg-row.flex-column.justify-content-center.align-items-center
                %a.btn.px-5.btn-primary.bg-color-2.br-style-1.mint-btn.mb-3.mb-lg-0.me-lg-3.fw-6#createOfferWithVoucher createOfferWithVoucher

:javascript
  const url = "/user/json/marketPlaceAbi.json";
  const marketPlaceAddress = "0xb5863aC3a747bFa37eEd4AAd84acec69723E954D";
  const nftAddress = "0x5Cdd8F41618D06C5BC6164B14786ADc7481F1A6E";
  const paymentTokenAddress = "0x39E77C8Bc081F20a7AA3a6027Db438FB5DAA1Aa0";

  let marketplaceAbi = undefined;
  let currentAccount = undefined;

  const setMarketplaceAbi = async () => {
    try {
      var data = await fetch(url);
      marketplaceAbi = await data.json();
    } catch (error) {
      console.log(error);
    }
  };

  const createOfferWithVoucher = async () => {
    try {
      let provider = (new Web3(Web3.givenProvider)).eth;

      var marketPlaceContract = new provider.Contract(marketplaceAbi, marketPlaceAddress);
      console.log('marketPlaceContract ---', marketPlaceContract);

      const nftId = '15792089237316195423570985008687907853269984665640564039457584007913129639935';

      return marketPlaceContract.methods.createOfferWithVoucher(
        nftAddress,
        nftAddress,
        nftId,
        '10',
        '20',
        '30',
        Date.now(),
        '500',
        'this is test',
        'sig'
      ).send({from: nftAddress})
    } catch (error) {
      console.log(error);
    }
  };

  setMarketplaceAbi();

  $('#createOfferWithVoucher').click(function(){
    createOfferWithVoucher();
  });
